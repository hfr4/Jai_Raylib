/* ******************************************************************************************
*
*   raylib [core] example - Input Gestures Detection
*
*   Example originally created with raylib 1.4, last time updated with raylib 4.2
*
*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,
*   BSD-like license that allows static linking with closed source software
*
*   Copyright (c) 2016-2024 Ramon Santamaria (@raysan5)
*
********************************************************************************************/

#import "Basic";
#import "Raylib";

MAX_GESTURE_STRINGS ::  20;

main :: () {
    SCREEN_WIDTH  :: 800;
    SCREEN_HEIGHT :: 450;

    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "raylib [core] example - input gestures");

    touchPosition : Vector2;
    touchArea := Rectangle.{ 220, 10, SCREEN_WIDTH - 230.0, SCREEN_HEIGHT - 20.0 };

    gesturesCount := 0;
    gestureStrings: [MAX_GESTURE_STRINGS][32] u8;

    currentGesture : s32 = xx Gesture.NONE;
    lastGesture : s32 = xx Gesture.NONE;

    //SetGesturesEnabled(0b0000000000001001);   // Enable only some gestures to be detected

    SetTargetFPS(60);

    while !WindowShouldClose() {

        lastGesture    = currentGesture;
        currentGesture = GetGestureDetected();
        touchPosition  = GetTouchPosition(0);

        if (CheckCollisionPointRec(touchPosition, touchArea) && (currentGesture != xx Gesture.NONE))
        {
            if (currentGesture != lastGesture)
            {
                // Store gesture string
                if currentGesture ==
                {
                    case xx Gesture.TAP;         TextCopy(gestureStrings[gesturesCount].data, "GESTURE TAP");
                    case xx Gesture.DOUBLETAP;   TextCopy(gestureStrings[gesturesCount].data, "GESTURE DOUBLETAP");
                    case xx Gesture.HOLD;        TextCopy(gestureStrings[gesturesCount].data, "GESTURE HOLD");
                    case xx Gesture.DRAG;        TextCopy(gestureStrings[gesturesCount].data, "GESTURE DRAG");
                    case xx Gesture.SWIPE_RIGHT; TextCopy(gestureStrings[gesturesCount].data, "GESTURE SWIPE RIGHT");
                    case xx Gesture.SWIPE_LEFT;  TextCopy(gestureStrings[gesturesCount].data, "GESTURE SWIPE LEFT");
                    case xx Gesture.SWIPE_UP;    TextCopy(gestureStrings[gesturesCount].data, "GESTURE SWIPE UP");
                    case xx Gesture.SWIPE_DOWN;  TextCopy(gestureStrings[gesturesCount].data, "GESTURE SWIPE DOWN");
                    case xx Gesture.PINCH_IN;    TextCopy(gestureStrings[gesturesCount].data, "GESTURE PINCH IN");
                    case xx Gesture.PINCH_OUT;   TextCopy(gestureStrings[gesturesCount].data, "GESTURE PINCH OUT");
                }

                gesturesCount += 1;

                // Reset gestures strings
                if (gesturesCount >= MAX_GESTURE_STRINGS)
                {
                    for i: 0..MAX_GESTURE_STRINGS - 1 TextCopy(gestureStrings[i].data, "\0");

                    gesturesCount = 0;
                }
            }
        }


        BeginDrawing();

            ClearBackground(RAYWHITE);

            DrawRectangleRec(touchArea, GRAY);
            DrawRectangle(225, 15, xx (SCREEN_WIDTH - 240), xx (SCREEN_HEIGHT - 30), RAYWHITE);

            DrawText("GESTURES TEST AREA", SCREEN_WIDTH - 270, SCREEN_HEIGHT - 40, 20, Fade(GRAY, 0.5));

            for i: 0..gesturesCount - 1
            {
                if (i%2 == 0) DrawRectangle(10, xx (30 + 20*i), 200, 20, Fade(LIGHTGRAY, 0.5));
                else          DrawRectangle(10, xx (30 + 20*i), 200, 20, Fade(LIGHTGRAY, 0.3));

                if (i < gesturesCount - 1) DrawText(gestureStrings[i].data, 35, xx (36 + 20*i), 10, DARKGRAY);
                else                       DrawText(gestureStrings[i].data, 35, xx (36 + 20*i), 10, MAROON);
            }

            DrawRectangleLines(10, 29, 200, SCREEN_HEIGHT - 50, GRAY);
            DrawText("DETECTED GESTURES", 50, 15, 10, GRAY);

            if (currentGesture != xx Gesture.NONE) DrawCircleV(touchPosition, 30, MAROON);

        EndDrawing();
    }
    CloseWindow();
}